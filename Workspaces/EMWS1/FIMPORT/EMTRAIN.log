MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 14, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "22:40:32 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 14, 2022
Time:                22:40:32 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2RN0JR1 "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2RN0JR1 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 14, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "22:40:32 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                chinh";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 14, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "22:40:32 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                chinh";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21273      proc freq data=EMWS1.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.FIMPORT_VariableSet noprint;
21274      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
21275      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

21276      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
21277      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21278      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21279      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21280      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21281      run;

NOTE: There were 2 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

21282      title10;
MPRINT(EM_DIAGRAM):   title10;
21283      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Final Project';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'import data';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21610      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21611      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
21612      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21613      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21614      %let EMEXCEPTIONSTRING=;
21615      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21616      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
21617      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21618      %let EM_ACTION = TRAIN;
21619      %let syscc = 0;
21620      /* Fimport.source */
21621      %macro main;
21622            %if %upcase(&EM_ACTION) = CREATE %then %do;
21623               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21624               %include temp;
21625               filename temp;
21626               %create;
21627            %end;
21628            %else
21629            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21630               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21631               %include temp;
21632               filename temp;
21633               %train;
21634            %end;
21635            %else
21636            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21637               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21638               %include temp;
21639               filename temp;
21640               %update;
21641            %end;
21642            %else
21643            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21644               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21645               %include temp;
21646               filename temp;
21647               %property;
21648            %end;
21649             %else
21650            %if %upcase(&EM_ACTION) = SCORE %then %do;
21651               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21652               %include temp;
21653               filename temp;
21654               %score;
21655            %end;
21656            %else
21657            %if %upcase(&EM_ACTION) = REPORT %then %do;
21658               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21659               %include temp;
21660               filename temp;
21661               %report;
21662            %end;
21663            %else
21664            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21665               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21666               %include temp;
21667               filename temp;
21668               %openvariableset;
21669            %end;
21670            %else
21671            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21672               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21673               %include temp;
21674               filename temp;
21675               %closevariableset;
21676            %end;
21677      %mend main;
21678      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21679     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21680     +%macro appendExt;
21681     +   data _null_;
21682     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21683     +      rfile = reverse(tempuif);
21684     +      period = indexc(rfile,".");
21685     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21686     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21687     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21688     +   run;
21689     +%mend appendExt;
21691     +%macro getNobs(ds);
21692     + %global dset nobs;
21693     + %let dset=&ds;
21694     + %let dsid = %sysfunc(open(&dset));
21695     + %if &dsid %then %do;
21696     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21697     +      %let rc = %sysfunc(close(&dsid));
21698     +   %end;
21699     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21700     +%mend getNobs;
21701     +%macro keepordrop;
21702     +  proc contents data=work.importfile noprint
21703     +  out=work.importattrs;
21704     +  run;
21705     +  %getNobs(work.importattrs);
21706     +  data _null_;
21707     +    set  work.importattrs;
21708     +    call symput("varname"||left(_n_),name);
21709     +  run;
21711     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21712     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21713     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21714     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21715     +     %put diff=&diff;
21716     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21717     +         %let kORd = keep;
21718     +             %let start=1;
21719     +             %let end = &EM_PROPERTY_MAXCOLS;
21720     +       %end;
21721     +     %else %do;
21722     +         %let kORd = drop;
21723     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21724     +             %let end = &nobs;
21725     +       %end;
21726     +     data &em_user_data;
21727     +        set &em_user_data;
21728     +        &kORd
21729     +        %do i = &start %to &end;
21730     +            &&varname&i
21731     +         %end;
21732     +        ;
21733     +     run;
21734     +%end;
21735     +%mend keepordrop;
21736     +%macro dropformatvars;
21737     +   %put fmtcnt=&fmtcnt;
21738     +   data new;
21739     +     set work.importfile;
21740     +     %do i = 1 %to &fmtcnt;
21741     +       x1zy&i =put(&&varname&i,&&fmt&i);
21742     +     %end;
21743     +   run;
21744     +   data new;
21745     +     set new;
21746     +     drop
21747     +     %do i = 1 %to &fmtcnt;
21748     +     &&varname&i
21749     +     %end;
21750     +     ;
21751     +   run;
21752     +   proc datasets library=work nolist;
21753     +     modify new;
21754     +     %do i = 1 %to &fmtcnt;
21755     +     rename x1zy&i=&&varname&i;
21756     +     %end;
21757     +   run; quit;
21758     +   data work.importfile;
21759     +     set new;
21760     +   run;
21761     +%mend;
21763     +%macro procimport(out=);
21764     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21765     +      proc import table=%sysfunc(trim(&EM_PROPERTY_ACCESSTABLE))
21766     +         out=&out
21767     +         dbms = ACCESS
21768     +         replace;
21769     +         database="%trim(&_IFILENAME)"
21770     +   %end;
21771     +   %else %do;
21772     +       proc import datafile="%trim(&_IFILENAME)"
21773     +          out=&out
21775     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21776     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21777     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21778     +         dbms=&EM_PROPERTY_FILETYPE
21779     +      %end;
21780     +      %else %do;
21781     +         dbms=TAB
21782     +      %end;
21783     +      /* Work around for the following defects:S0560899 and S0560009.   */
21784     +      %let sasEnv=%sysfunc(getlocenv());
21785     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21786     +         dbms=EXCEL
21787     +      %end;
21789     +      replace;
21790     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21791     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21792     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21793     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21794     +            getnames=&EM_PROPERTY_NAMEROW;
21795     +        %end;
21796     +      %end;
21797     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21798     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21799     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21800     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21801     +               delimiter=" ";
21802     +            %end;
21803     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21804     +               /* Do not specifiy a delimiter */
21805     +            %end;
21806     +            %else %do;
21807     +               delimiter="&EM_PROPERTY_DELIMITER";
21808     +            %end;
21809     +         %end;
21810     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21811     +            datarow=&EM_PROPERTY_SKIPROWS;
21812     +            /* Guessingrows must be >= skiprows */
21813     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21814     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21815     +            %end;
21816     +         %end;
21817     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21818     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21819     +         %end;
21820     +       %end;
21821     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21822     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21823     +            FMTLIB = work.formats;
21824     +      %end;
21825     +   %end;
21826     +   run;
21827     +%mend procimport;
21829     +%macro train;
21831     +   %let vvnString = %sysfunc(getoption(validvarname));
21833     +   %em_getname(key=DATA,           type=DATA);
21834     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21835     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21836     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21838     +   %appendExt;
21840     +   %let _IFILENAME = %nrbquote(%trim(&EM_PROPERTY_IFILENAME));
21841     +   %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21842     +       %if %nrbquote(%sysfunc(fileexist(&EM_USER_USERIMPORTFILE))) %then
21843     +           %let _IFILENAME = %nrbquote(&EM_USER_USERIMPORTFILE);
21844     +   %end;
21846     +   %if ^%sysfunc(fileexist(%nrbquote(&_IFILENAME))) %then %do;
21847     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTRAININGCODEFILE,%nrbquote(&_IFILENAME);
21848     +       %goto endtrain;
21849     +   %end;
21851     +   options validvarname=ANY;
21852     +   %procimport(out=work.importfile);
21854     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21855     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21856     +      %global fmtcnt;
21857     +      %let fmtcnt=0;
21858     +      proc contents data=work.importfile out=work.impattrs noprint;
21859     +      run;
21860     +      data _null_;
21861     +        set work.impattrs;
21862     +        if _n_=1 then i=0;
21863     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21864     +           i = i+1;
21865     +           varname = substr(name, 1, length(name));
21866     +           call symput("fmt"||left(i), trim(format)||".");
21867     +           call symput("varname"||left(i), varname);
21868     +           call symput("fmtcnt",left(i));
21869     +      end;
21870     +      retain i;
21871     +     run;
21872     +    %if &fmtcnt > 0 %then %do;
21873     +       %dropformatvars;
21874     +    %end;
21875     +    proc datasets lib=work memtype=data nolist;
21876     +        modify importfile;
21877     +        attrib _all_ format=;
21878     +    run;
21879     +    quit;
21880     +   %end;
21882     +   %let _fimportObs  = 0;
21883     +   %let _fimportVars = 0;
21884     +   %if %sysfunc(exist(work.importFile)) %then %do;
21885     +       %let dsid = %sysfunc(open(work.importFile));
21886     +       %if &dsid %then %do;
21887     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21888     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21889     +       %let dsid = %sysfunc(close(&dsid));
21890     +       %end;
21891     +   %end;
21893     +   %if ^&_fimportObs %then %do;
21894     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21895     +       %goto endtrain;
21896     +   %end;
21897     +   %if ^&_fimportVars %then %do;
21898     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21899     +       %goto endtrain;
21900     +   %end;
21902     +   data &em_user_data;
21903     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21904     +   run;
21905     +   %keepordrop;
21907     +   %em_getname(key=EMSTAT,     type=DATA);
21909     +   proc datasets lib=&em_lib nolist;
21910     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21911     +   run;
21913     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21914     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21915     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21916     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21917     +            maxClassLevels=20, identifyEmptyColumns=Y,
21918     +            outdata=&em_user_EMCMETADEFAULT,
21919     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21921     +        data &em_user_emcmetadefault;
21922     +           set &em_user_emcmetadefault;
21923     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21924     +        run;
21926     +        data &em_data_eminfo;
21927     +           length TARGET KEY $32  DATA $43;
21928     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21929     +        run;
21931     +        %let EM_META_ADVISOR=ADVANCED;
21933     +   %end;
21934     +   %else %do;
21935     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21936     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21937     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21938     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21940     +            %if "&em_property_summarize" eq "Y" %then %do;
21941     +                %em_getname(key=EMSTAT,  type=DATA);
21942     +                data &em_data_eminfo;
21943     +                   length TARGET KEY $32  DATA $43;
21944     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21945     +                run;
21946     +            %end;
21948     +        %let EM_META_ADVISOR=BASIC;
21950     +   %end;
21952     +   %em_getname(key=VVNLABEL, type=FILE, extension=sas);
21953     +   data _null_;
21954     +      fname = '_text';
21955     +      rc=filename(fname, "&em_user_vvnlabel");
21956     +      if ^rc and fexist(fname) then
21957     +         rc=fdelete(fname);
21958     +     rc=filename(fname);
21959     +   run;
21962     +   /* Validvarname Case */
21963     +   %let newNameFlag = 0;
21964     +   %if %sysfunc(exist(&em_user_EMCMETADEFAULT)) %then %do;
21965     +       %let dsid = %sysfunc(open(&em_user_EMCMETADEFAULT));
21966     +        %if &dsid %then %do;
21967     +            %let newNameFlag = %sysfunc(varnum(&dsid, NEWNAME));
21968     +            %let dsid = %sysfunc(close(&dsid));
21969     +       %end;
21970     +   %end;
21972     +   %if %sysevalf(&newNameFlag>0) %then %do;
21973     +       proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
21974     +       run;
21975     +       proc sort data=work._any; by VARNUM; run; quit;
21977     +       options validvarname=V7;
21979     +       %procimport(out=work.importfile2);
21981     +       options validvarname=ANY;
21983     +       proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
21984     +       run;
21985     +       proc sort data=work._v7; by varnum; run; quit;
21987     +       filename _FI "&em_user_vvnlabel";
21988     +       data work._names;
21989     +          length string $200;
21990     +          merge work._v7 work._any;
21991     +          by VARNUM;
21992     +          file _FI;
21993     +          if V7NAME ne NAME then do;
21994     +             string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
21995     +             put string;
21996     +             if LABEL eq '' then do;
21997     +                string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
21998     +                put string;
21999     +             end;
22000     +             string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
22001     +             put string;
22002     +          end;
22003     +          drop string;
22004     +       run;
22005     +       data &em_user_data;
22006     +          set &em_user_data;
22007     +          %if %sysfunc(fileexist(%nrbquote(&em_user_vvnlabel))) %then %do;
22008     +              filename _FI "&em_user_vvnlabel";
22009     +              %inc _FI;
22010     +             filename _FI;
22011     +          %end;
22012     +       run;
22014     +       proc sort data=&em_user_EMCMETADEFAULT; by NAME; run;
22015     +       proc sort data=work._names;             by NAME; run;
22017     +       data &em_user_EMCMETADEFAULT;
22018     +         merge  &em_user_EMCMETADEFAULT _names;
22019     +         by NAME;
22020     +         length DROP $1;
22021     +         DROP='N';
22022     +         if NEWNAME ne NAME then do;
22023     +            if LABEL eq '' then do;
22024     +               LABEL = NAME;
22025     +            end;
22026     +            NAME=V7NAME;
22027     +         end;
22028     +         drop NEWNAME V7NAME VARNUM;
22029     +       run;
22031     +       proc datasets lib=work nolist;
22032     +          delete _any _v7 _names importfile2;
22033     +       run;
22034     +       quit;
22036     +   %end;
22037     +   %else %do;
22038     +       data &em_user_EMCMETADEFAULT;
22039     +          set &em_user_EMCMETADEFAULT;
22040     +          length DROP $1;
22041     +          DROP='N';
22042     +       run;
22043     +   %end;
22045     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
22047     +   data _temp;
22048     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
22049     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
22050     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
22051     +      COLUMNMETAMODTIME=MODTIME;
22052     +   run;
22053     +   proc sort data=&em_data_importset;
22054     +      by PORT;
22055     +   run;
22056     +   data &em_data_importset;
22057     +      merge &em_data_importset _temp;
22058     +      by PORT;
22059     +      if PORT='DATA' then ROLE="&em_property_role";
22060     +   run;
22062     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
22064     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
22065     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
22066     +            filename x "&em_user_variablesetdelta";
22067     +            data &em_data_variableset;
22068     +               set &em_user_emcmetadefault;
22069     +               %inc X;
22070     +            run;
22071     +            filename x;
22072     +        %end;
22073     +        %else %do;
22074     +            data &em_data_variableset;
22075     +               set &em_user_emcmetadefault;
22076     +            run;
22077     +        %end;
22078     +    %end;
22080     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
22081     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
22082     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
22083     +         id NAME;
22084     +      run;
22086     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
22087     +         data _null_;
22088     +            length string $200;
22089     +            set _DiffMeta end=eof;
22090     +            where _type_='COMPARE';
22091     +            file x1;
22092     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
22093     +            put string;
22094     +            string = '   ROLE="'!!strip(ROLE)!!'";';
22095     +            put string;
22096     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
22097     +            put string;
22098     +            string = '   ORDER="'!!strip(ORDER)!!'";';
22099     +            put string;
22100     +            put 'end;';
22101     +            if drop='Y' then do;
22102     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
22103     +               put string;
22104     +            end;
22105     +            if eof then
22106     +               put 'drop DROP;';
22107     +         run;
22109     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
22110     +         filename x2 "&em_user_deltacode";
22111     +         %em_copyfile(infref=x1, outfref=x2);
22112     +         filename x1;
22113     +         filename x2;
22115     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
22116     +         filename x "&em_user_variablesetdelta";
22117     +         data _null_;
22118     +            length string $200;
22119     +            set _DiffMeta end=eof;
22120     +            where _type_='COMPARE';
22121     +            file x;
22122     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
22123     +            put string;
22124     +            string = '   ROLE="'!!strip(ROLE)!!'";';
22125     +            put string;
22126     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
22127     +            put string;
22128     +            string = '   ORDER="'!!strip(ORDER)!!'";';
22129     +            put string;
22130     +            string = '   DROP="'!!strip(DROP)!!'";';
22131     +            put string;
22132     +            put 'end;';
22133     +         run;
22134     +         filename x;
22135     +       proc datasets lib=work nolist;
22136     +          delete _DiffMeta;
22137     +       run;
22139     +       data &em_data_exportset;
22140     +          set &em_data_exportset;
22141     +          if NODEPORT='TRAIN' then do;
22142     +             ROLE="&em_property_role";
22143     +             COLUMNMETAMODTIME=datetime();
22144     +             MODTIME=datetime();
22145     +             DATASET="&em_nodeid._train";
22146     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
22147     +             DELTACODE="CDelta_TRAIN";
22148     +             APPLYDELTA='Y';
22149     +             EXPORT='Y';
22150     +             NEEDUPDATE='Y';
22152     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
22153     +                EMINFO="&em_data_eminfo";
22154     +                EMINFOMODTIME=datetime();
22155     +            %end;
22156     +            %else %do;
22157     +                EMINFO='';
22158     +                EMINFOMODTIME=.;
22159     +            %end;
22160     +          end;
22161     +       run;
22162     +   %end;
22164     +  proc contents data=&em_user_data;
22165     +  run;
22166     +  proc datasets library=work nolist;
22167     +   delete importfile importattrs new;
22168     +   quit;
22169     +  run;
22171     +  /* Reset VALIDVARNAME to original settings */
22172     +  options validvarname=&vvnString;
22174     +  %endtrain:
22175     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("csv");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*csv*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv" out=work.importfile dbms=csv replace;
MPRINT(PROCIMPORT):   ADLM;
MPRINT(PROCIMPORT):   getnames=Y;
MPRINT(PROCIMPORT):   delimiter=",";
MPRINT(PROCIMPORT):   guessingrows=500;
MPRINT(PROCIMPORT):   run;

22176       /**********************************************************************
22177       *   PRODUCT:   SAS
22178       *   VERSION:   9.4
22179       *   CREATOR:   External File Interface
22180       *   DATE:      14APR22
22181       *   DESC:      Generated SAS Datastep Code
22182       *   TEMPLATE SOURCE:  (None Specified.)
22183       ***********************************************************************/
22184          data WORK.IMPORTFILE    ;
MPRINT(PROCIMPORT):   data WORK.IMPORTFILE ;
22185          %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
22186          infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
MPRINT(PROCIMPORT):   infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
22187             informat ","N best32. ;
MPRINT(PROCIMPORT):   informat ","N best32. ;
22188             informat Class $20. ;
MPRINT(PROCIMPORT):   informat Class $20. ;
22189             informat menopause $7. ;
MPRINT(PROCIMPORT):   informat menopause $7. ;
22190             informat "node-caps"N $3. ;
MPRINT(PROCIMPORT):   informat "node-caps"N $3. ;
22191             informat "deg-malig"N best32. ;
MPRINT(PROCIMPORT):   informat "deg-malig"N best32. ;
22192             informat breast $5. ;
MPRINT(PROCIMPORT):   informat breast $5. ;
22193             informat "breast-quad"N $9. ;
MPRINT(PROCIMPORT):   informat "breast-quad"N $9. ;
22194             informat irradiat $3. ;
MPRINT(PROCIMPORT):   informat irradiat $3. ;
22195             informat age_min best32. ;
MPRINT(PROCIMPORT):   informat age_min best32. ;
22196             informat age_max best32. ;
MPRINT(PROCIMPORT):   informat age_max best32. ;
22197             informat "tumor-size_min"N best32. ;
MPRINT(PROCIMPORT):   informat "tumor-size_min"N best32. ;
22198             informat "tumor-size_max"N best32. ;
MPRINT(PROCIMPORT):   informat "tumor-size_max"N best32. ;
22199             informat "inv-nodes_min"N best32. ;
MPRINT(PROCIMPORT):   informat "inv-nodes_min"N best32. ;
22200             informat "inv-nodes_max"N best32. ;
MPRINT(PROCIMPORT):   informat "inv-nodes_max"N best32. ;
22201             format ","N best12. ;
MPRINT(PROCIMPORT):   format ","N best12. ;
22202             format Class $20. ;
MPRINT(PROCIMPORT):   format Class $20. ;
22203             format menopause $7. ;
MPRINT(PROCIMPORT):   format menopause $7. ;
22204             format "node-caps"N $3. ;
MPRINT(PROCIMPORT):   format "node-caps"N $3. ;
22205             format "deg-malig"N best12. ;
MPRINT(PROCIMPORT):   format "deg-malig"N best12. ;
22206             format breast $5. ;
MPRINT(PROCIMPORT):   format breast $5. ;
22207             format "breast-quad"N $9. ;
MPRINT(PROCIMPORT):   format "breast-quad"N $9. ;
22208             format irradiat $3. ;
MPRINT(PROCIMPORT):   format irradiat $3. ;
22209             format age_min best12. ;
MPRINT(PROCIMPORT):   format age_min best12. ;
22210             format age_max best12. ;
MPRINT(PROCIMPORT):   format age_max best12. ;
22211             format "tumor-size_min"N best12. ;
MPRINT(PROCIMPORT):   format "tumor-size_min"N best12. ;
22212             format "tumor-size_max"N best12. ;
MPRINT(PROCIMPORT):   format "tumor-size_max"N best12. ;
22213             format "inv-nodes_min"N best12. ;
MPRINT(PROCIMPORT):   format "inv-nodes_min"N best12. ;
22214             format "inv-nodes_max"N best12. ;
MPRINT(PROCIMPORT):   format "inv-nodes_max"N best12. ;
22215          input
22216                      ","N
22217                      Class $
22218                      menopause $
22219                      "node-caps"N $
22220                      "deg-malig"N
22221                      breast $
22222                      "breast-quad"N $
22223                      irradiat $
22224                      age_min
22225                      age_max
22226                      "tumor-size_min"N
22227                      "tumor-size_max"N
22228                      "inv-nodes_min"N
22229                      "inv-nodes_max"N
22230          ;
MPRINT(PROCIMPORT):   input ","N Class $ menopause $ "node-caps"N $ "deg-malig"N breast $ "breast-quad"N $ irradiat $ age_min age_max "tumor-size_min"N "tumor-size_max"N "inv-nodes_min"N "inv-nodes_max"N ;
22231          if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
MPRINT(PROCIMPORT):   if _ERROR_ then call symputx('_EFIERR_',1);
22232          run;
MPRINT(PROCIMPORT):   run;

NOTE: The infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' is:
      Filename=C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=20114,
      Last Modified=April 14, 2022 22:40:24 o'clock,
      Create Time=April 14, 2022 02:04:15 o'clock

NOTE: 286 records were read from the infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv'.
      The minimum record length was 57.
      The maximum record length was 75.
NOTE: The data set WORK.IMPORTFILE has 286 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

286 rows created in WORK.IMPORTFILE from C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv.
  
  
  
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: The data set WORK.IMPORTFILE has 286 observations and 14 variables.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.17 seconds
      cpu time            0.12 seconds
      

MPRINT(PROCIMPORT):    ;
MPRINT(TRAIN):   ;
MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 286 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS1.FIMPORT_DATA has 286 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 14 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:137   
NOTE: There were 14 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nobs=14  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS1.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.FIMPORT_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

22233      %let SYSCC = 0;
22234      %let _dsidTable = 0;
22235      %let _engineTable =;
22236      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
22237      dsid = open('EMWS1.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.FIMPORT_DATA');
22238      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
22239      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
22240      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
22241      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
22242      end;
MPRINT(EMADVISECOLUMNS):   end;
22243      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22244      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
22245      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
22246      set EMWS1.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS1.FIMPORT_DATA;
22247      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
22248      output;
MPRINT(EMADVISECOLUMNS):   output;
22249      stop;
MPRINT(EMADVISECOLUMNS):   stop;
22250      end;
MPRINT(EMADVISECOLUMNS):   end;
22251      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22252      proc contents data=EMWS1.FIMPORT_DATA
22253      out=WORK.M0J16VFA noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.FIMPORT_DATA out=WORK.M0J16VFA noprint;
22254      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M0J16VFA has 14 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

22255      data WORK.M0J16VFA;
MPRINT(EMADVISECOLUMNS):    data WORK.M0J16VFA;
22256      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
22257      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
22258      set WORK.M0J16VFA(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M0J16VFA(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
22259      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
22260      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
22261      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
22262      if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
22263      if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
22264      else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
22265      end;
MPRINT(EMADVISECOLUMNS):   end;
22266      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
22267      end;
MPRINT(EMADVISECOLUMNS):   end;
22268      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
22269      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
22270      if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
22271      if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
22272      else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
22273      end;
MPRINT(EMADVISECOLUMNS):   end;
22274      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
22275      end;
MPRINT(EMADVISECOLUMNS):   end;
22276      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
22277      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
22278      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
22279      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
22280      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
22281      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 14 observations read from the data set WORK.M0J16VFA.
NOTE: The data set WORK.M0J16VFA has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22282      data WORK.M0J16VFA;
MPRINT(EMADVISECOLUMNS):    data WORK.M0J16VFA;
22283      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
22284      set WORK.M0J16VFA;
MPRINT(EMADVISECOLUMNS):   set WORK.M0J16VFA;
22285      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
22286      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 14 observations read from the data set WORK.M0J16VFA.
NOTE: The data set WORK.M0J16VFA has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0P0P7BX NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
22290      data WORK.M0P0P7BX;
MPRINT(EMADVISECOLUMNS):    data WORK.M0P0P7BX;
22291      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
22292      set WORK.M0P0P7BX;
MPRINT(EMADVISECOLUMNS):   set WORK.M0P0P7BX;
22293      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 14 observations read from the data set WORK.M0P0P7BX.
NOTE: The data set WORK.M0P0P7BX has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M0TXOVCP(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0P0P7BX;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0P0P7BX;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0P0P7BX;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0P0P7BX;
MPRINT(EMADVISECOLUMNS):   set WORK.M0P0P7BX;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   label NEWNAME = "New Variable Name";
MPRINT(EMADVISECOLUMNS):   length NEWNAME $32;
MPRINT(EMADVISECOLUMNS):   NEWNAME=NAME;
MPRINT(EMADVISECOLUMNS):   if NAME =',' then NEWNAME="_COL0";
MPRINT(EMADVISECOLUMNS):   if NAME ='breast-quad' then NEWNAME="breast_quad";
MPRINT(EMADVISECOLUMNS):   if NAME ='deg-malig' then NEWNAME="deg_malig";
MPRINT(EMADVISECOLUMNS):   if NAME ='inv-nodes_max' then NEWNAME="inv_nodes_max";
MPRINT(EMADVISECOLUMNS):   if NAME ='inv-nodes_min' then NEWNAME="inv_nodes_min";
MPRINT(EMADVISECOLUMNS):   if NAME ='node-caps' then NEWNAME="node_caps";
MPRINT(EMADVISECOLUMNS):   if NAME ='tumor-size_max' then NEWNAME="tumor_size_max";
MPRINT(EMADVISECOLUMNS):   if NAME ='tumor-size_min' then NEWNAME="tumor_size_min";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.28 seconds
      cpu time            0.25 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   fname = '_text';
MPRINT(TRAIN):   rc=filename(fname, "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas");
MPRINT(TRAIN):   if ^rc and fexist(fname) then rc=fdelete(fname);
MPRINT(TRAIN):   rc=filename(fname);
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
MPRINT(TRAIN):   run;

NOTE: The data set WORK._ANY has 14 observations and 3 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=work._any;
MPRINT(TRAIN):   by VARNUM;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set WORK._ANY.
NOTE: The data set WORK._ANY has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*csv*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv" out=work.importfile2 dbms=csv replace;
MPRINT(PROCIMPORT):   ADLM;
MPRINT(PROCIMPORT):   getnames=Y;
MPRINT(PROCIMPORT):   delimiter=",";
MPRINT(PROCIMPORT):   guessingrows=500;
MPRINT(PROCIMPORT):   run;

22555       /**********************************************************************
22556       *   PRODUCT:   SAS
22557       *   VERSION:   9.4
22558       *   CREATOR:   External File Interface
22559       *   DATE:      14APR22
22560       *   DESC:      Generated SAS Datastep Code
22561       *   TEMPLATE SOURCE:  (None Specified.)
22562       ***********************************************************************/
22563          data WORK.IMPORTFILE2    ;
MPRINT(PROCIMPORT):   data WORK.IMPORTFILE2 ;
22564          %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
22565          infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
MPRINT(PROCIMPORT):   infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
22566             informat _ best32. ;
MPRINT(PROCIMPORT):   informat _ best32. ;
22567             informat Class $20. ;
MPRINT(PROCIMPORT):   informat Class $20. ;
22568             informat menopause $7. ;
MPRINT(PROCIMPORT):   informat menopause $7. ;
22569             informat node_caps $3. ;
MPRINT(PROCIMPORT):   informat node_caps $3. ;
22570             informat deg_malig best32. ;
MPRINT(PROCIMPORT):   informat deg_malig best32. ;
22571             informat breast $5. ;
MPRINT(PROCIMPORT):   informat breast $5. ;
22572             informat breast_quad $9. ;
MPRINT(PROCIMPORT):   informat breast_quad $9. ;
22573             informat irradiat $3. ;
MPRINT(PROCIMPORT):   informat irradiat $3. ;
22574             informat age_min best32. ;
MPRINT(PROCIMPORT):   informat age_min best32. ;
22575             informat age_max best32. ;
MPRINT(PROCIMPORT):   informat age_max best32. ;
22576             informat tumor_size_min best32. ;
MPRINT(PROCIMPORT):   informat tumor_size_min best32. ;
22577             informat tumor_size_max best32. ;
MPRINT(PROCIMPORT):   informat tumor_size_max best32. ;
22578             informat inv_nodes_min best32. ;
MPRINT(PROCIMPORT):   informat inv_nodes_min best32. ;
22579             informat inv_nodes_max best32. ;
MPRINT(PROCIMPORT):   informat inv_nodes_max best32. ;
22580             format _ best12. ;
MPRINT(PROCIMPORT):   format _ best12. ;
22581             format Class $20. ;
MPRINT(PROCIMPORT):   format Class $20. ;
22582             format menopause $7. ;
MPRINT(PROCIMPORT):   format menopause $7. ;
22583             format node_caps $3. ;
MPRINT(PROCIMPORT):   format node_caps $3. ;
22584             format deg_malig best12. ;
MPRINT(PROCIMPORT):   format deg_malig best12. ;
22585             format breast $5. ;
MPRINT(PROCIMPORT):   format breast $5. ;
22586             format breast_quad $9. ;
MPRINT(PROCIMPORT):   format breast_quad $9. ;
22587             format irradiat $3. ;
MPRINT(PROCIMPORT):   format irradiat $3. ;
22588             format age_min best12. ;
MPRINT(PROCIMPORT):   format age_min best12. ;
22589             format age_max best12. ;
MPRINT(PROCIMPORT):   format age_max best12. ;
22590             format tumor_size_min best12. ;
MPRINT(PROCIMPORT):   format tumor_size_min best12. ;
22591             format tumor_size_max best12. ;
MPRINT(PROCIMPORT):   format tumor_size_max best12. ;
22592             format inv_nodes_min best12. ;
MPRINT(PROCIMPORT):   format inv_nodes_min best12. ;
22593             format inv_nodes_max best12. ;
MPRINT(PROCIMPORT):   format inv_nodes_max best12. ;
22594          input
22595                      _
22596                      Class $
22597                      menopause $
22598                      node_caps $
22599                      deg_malig
22600                      breast $
22601                      breast_quad $
22602                      irradiat $
22603                      age_min
22604                      age_max
22605                      tumor_size_min
22606                      tumor_size_max
22607                      inv_nodes_min
22608                      inv_nodes_max
22609          ;
MPRINT(PROCIMPORT):   input _ Class $ menopause $ node_caps $ deg_malig breast $ breast_quad $ irradiat $ age_min age_max tumor_size_min tumor_size_max inv_nodes_min inv_nodes_max ;
22610          if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
MPRINT(PROCIMPORT):   if _ERROR_ then call symputx('_EFIERR_',1);
22611          run;
MPRINT(PROCIMPORT):   run;

NOTE: The infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' is:
      Filename=C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=20114,
      Last Modified=April 14, 2022 22:40:24 o'clock,
      Create Time=April 14, 2022 02:04:15 o'clock

NOTE: 286 records were read from the infile 'C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv'.
      The minimum record length was 57.
      The maximum record length was 75.
NOTE: The data set WORK.IMPORTFILE2 has 286 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

286 rows created in WORK.IMPORTFILE2 from C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv.
  
  
  
NOTE: WORK.IMPORTFILE2 data set was successfully created.
NOTE: The data set WORK.IMPORTFILE2 has 286 observations and 14 variables.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
      

MPRINT(PROCIMPORT):    ;
MPRINT(TRAIN):   ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(TRAIN):   proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
MPRINT(TRAIN):   run;

NOTE: The data set WORK._V7 has 14 observations and 3 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=work._v7;
MPRINT(TRAIN):   by varnum;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set WORK._V7.
NOTE: The data set WORK._V7 has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   filename _FI "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas";
MPRINT(TRAIN):   data work._names;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   merge work._v7 work._any;
MPRINT(TRAIN):   by VARNUM;
MPRINT(TRAIN):   file _FI;
MPRINT(TRAIN):   if V7NAME ne NAME then do;
MPRINT(TRAIN):   string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   if LABEL eq '' then do;
MPRINT(TRAIN):   string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   drop string;
MPRINT(TRAIN):   run;

NOTE: The file _FI is:
      Filename=C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 14, 2022 22:40:33 o'clock,
      Create Time=April 14, 2022 02:04:17 o'clock

NOTE: 24 records were written to the file _FI.
      The minimum record length was 8.
      The maximum record length was 38.
NOTE: There were 14 observations read from the data set WORK._V7.
NOTE: There were 14 observations read from the data set WORK._ANY.
NOTE: The data set WORK._NAMES has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   filename _FI "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas";
NOTE: %INCLUDE (level 1) file _FI is file C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas.
22612     +_= ","n;
MPRINT(TRAIN):   _= ","n;
22613     +Label _=',';
MPRINT(TRAIN):   Label _= ',';
22614     +drop ","n;
MPRINT(TRAIN):   drop ","n;
22615     +node_caps= "node-caps"n;
MPRINT(TRAIN):   node_caps= "node-caps"n;
22616     +Label node_caps='node-caps';
MPRINT(TRAIN):   Label node_caps= 'node-caps';
22617     +drop "node-caps"n;
MPRINT(TRAIN):   drop "node-caps"n;
22618     +deg_malig= "deg-malig"n;
MPRINT(TRAIN):   deg_malig= "deg-malig"n;
22619     +Label deg_malig='deg-malig';
MPRINT(TRAIN):   Label deg_malig= 'deg-malig';
22620     +drop "deg-malig"n;
MPRINT(TRAIN):   drop "deg-malig"n;
22621     +breast_quad= "breast-quad"n;
MPRINT(TRAIN):   breast_quad= "breast-quad"n;
22622     +Label breast_quad='breast-quad';
MPRINT(TRAIN):   Label breast_quad= 'breast-quad';
22623     +drop "breast-quad"n;
MPRINT(TRAIN):   drop "breast-quad"n;
22624     +tumor_size_min= "tumor-size_min"n;
MPRINT(TRAIN):   tumor_size_min= "tumor-size_min"n;
22625     +Label tumor_size_min='tumor-size_min';
MPRINT(TRAIN):   Label tumor_size_min= 'tumor-size_min';
22626     +drop "tumor-size_min"n;
MPRINT(TRAIN):   drop "tumor-size_min"n;
22627     +tumor_size_max= "tumor-size_max"n;
MPRINT(TRAIN):   tumor_size_max= "tumor-size_max"n;
22628     +Label tumor_size_max='tumor-size_max';
MPRINT(TRAIN):   Label tumor_size_max= 'tumor-size_max';
22629     +drop "tumor-size_max"n;
MPRINT(TRAIN):   drop "tumor-size_max"n;
22630     +inv_nodes_min= "inv-nodes_min"n;
MPRINT(TRAIN):   inv_nodes_min= "inv-nodes_min"n;
22631     +Label inv_nodes_min='inv-nodes_min';
MPRINT(TRAIN):   Label inv_nodes_min= 'inv-nodes_min';
22632     +drop "inv-nodes_min"n;
MPRINT(TRAIN):   drop "inv-nodes_min"n;
22633     +inv_nodes_max= "inv-nodes_max"n;
MPRINT(TRAIN):   inv_nodes_max= "inv-nodes_max"n;
22634     +Label inv_nodes_max='inv-nodes_max';
MPRINT(TRAIN):   Label inv_nodes_max= 'inv-nodes_max';
22635     +drop "inv-nodes_max"n;
MPRINT(TRAIN):   drop "inv-nodes_max"n;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename _FI;
NOTE: Fileref _FI has been deassigned.
MPRINT(TRAIN):   run;

NOTE: There were 286 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set EMWS1.FIMPORT_DATA has 286 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 14 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=work._names;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set WORK._NAMES.
NOTE: The data set WORK._NAMES has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_EMCMETADEFAULT _names;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   if NEWNAME ne NAME then do;
MPRINT(TRAIN):   if LABEL eq '' then do;
MPRINT(TRAIN):   LABEL = NAME;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   NAME=V7NAME;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   drop NEWNAME V7NAME VARNUM;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: There were 14 observations read from the data set WORK._NAMES.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 14 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _any _v7 _names importfile2;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._ANY (memtype=DATA).
NOTE: Deleting WORK._V7 (memtype=DATA).
NOTE: Deleting WORK._NAMES (memtype=DATA).
NOTE: Deleting WORK.IMPORTFILE2 (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

22636      %let SYSCC = 0;
22637      data EMWS1.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS1.FIMPORT_EMTMETADEFAULT;
22638      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
22639      LIBNAME = "EMWS1";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS1";
22640      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS1.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M2OK64DZ;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M2OK64DZ(obs=1);
MPRINT(EMADVISETABLE):   nobs = 286;
MPRINT(EMADVISETABLE):   ncols = 14;
MPRINT(EMADVISETABLE):   nbytes = 66560;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1965595233.521;
MPRINT(EMADVISETABLE):   modate = 1965595233.521;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRAIN";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS1.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt.
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_VARIABLESET has 14 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS1.FIMPORT_VariableSet base=EMWS1.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

WARNING: The data set EMWS1.FIMPORT_EMCMETADEFAULT is not sorted by the ID variables. Observations will be matched using NOTSORTED logic with the assumption that the observations correspond one-to-one.
NOTE: At observation 2 the current and previous ID values are:
WARNING: The data set EMWS1.FIMPORT_VARIABLESET is not sorted by the ID variables. Observations will be matched using NOTSORTED logic with the assumption that the observations correspond one-to-one.
NOTE: At observation 2 the current and previous ID values are:
NOTE: There were 14 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: There were 14 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 0 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x1 "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 14, 2022 22:40:33 o'clock,
      Create Time=April 14, 2022 01:57:04 o'clock

NOTE: 0 records were written to the file X1.
NOTE: There were 0 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=April 14, 2022 22:40:33 o'clock,
      Create Time=April 14, 2022 02:04:17 o'clock

NOTE: 0 records were written to the file X2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=C:\Users\chinh\Documents\seneca\ban210\final proj\Final Project\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 14, 2022 22:40:33 o'clock,
      Create Time=April 14, 2022 02:04:17 o'clock

NOTE: 0 records were written to the file X.
NOTE: There were 0 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRAIN";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   run;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22669      *------------------------------------------------------------*;
22670      * End TRAIN: FIMPORT;
22671      *------------------------------------------------------------*;

22672      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22673      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22674      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22675      ;
MPRINT(EM_DIAGRAM):   ;
22676      ;
MPRINT(EM_DIAGRAM):   ;
22677      ;
MPRINT(EM_DIAGRAM):   ;
22678      ;
MPRINT(EM_DIAGRAM):   ;
22679      quit;
MPRINT(EM_DIAGRAM):   quit;
22680      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22681      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
22682      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22683      /*; *"; *'; */
22684      ;
MPRINT(EM_DIAGRAM):   ;
22685      run;
MPRINT(EM_DIAGRAM):   run;
22686      quit;
MPRINT(EM_DIAGRAM):   quit;
22687      /* Reset EM Options */
22688      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22689      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22690      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
